# Имя рабочего процесса, отображаемое на GitHub Actions
name: Test Python App

# Триггер: Запускать этот workflow при любом push в любую ветку репозитория
on: push

jobs:
  # Имя задания (может быть любым, 'ci' - common practice for Continuous Integration)
  ci:
    # Указываем тип виртуальной машины, на которой будет выполняться задание
    # 'ubuntu-latest' - последняя стабильная версия Ubuntu Linux
    runs-on: ubuntu-latest

    # Последовательность шагов, выполняемых в рамках задания 'ci'
    steps:
      # Шаг 1: Получение кода репозитория
      # Используем стандартное действие 'checkout' для загрузки кода
      # на виртуальную машину, чтобы workflow мог с ним работать.
      # v4 - это версия действия, рекомендуется использовать актуальные версии.
      - name: Checkout repository code
        uses: actions/checkout@v4

      # Шаг 2: Настройка среды Python
      # Используем стандартное действие 'setup-python' для установки
      # нужной версии Python и добавления её в PATH.
      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          # Указываем версию Python, как требовалось в лабораторной (3.12)
          python-version: '3.12'

      # Шаг 3: Установка зависимостей
      # Этот шаг устанавливает все пакеты, необходимые для сборки,
      # тестирования и запуска приложения.
      - name: Install project dependencies
        run: | # 'run' выполняет команды в shell виртуальной машины
          # '|' позволяет писать многострочный скрипт
          # Сначала обновляем pip до последней версии (хорошая практика)
          python -m pip install --upgrade pip
          # Затем устанавливаем пакеты, перечисленные в файле requirements.txt,
          # а также явно устанавливаем pytest и httpx, как указано в ЛР
          # (httpx нужен для TestClient, даже если не используется напрямую в тестах)
          # Убедитесь, что в requirements.txt есть как минимум fastapi, uvicorn, pydantic
          pip install -r requirements.txt pytest httpx

         # !!! НОВЫЙ ДИАГНОСТИЧЕСКИЙ ШАГ !!!
      - name: Show Pydantic Info
        run: pip show pydantic

      # Шаг 4: Запуск тестов
      - name: Run tests with pytest
        # Добавляем переменную окружения PYTHONPATH
        # Указываем '.', что означает текущую рабочую директорию
        # (корневую папку репозитория после checkout), где находится папка src
        env:
          PYTHONPATH: '.'
        # Команда запуска pytest остается прежней
        run: python -m pytest tests/
